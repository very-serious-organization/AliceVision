name: Continuous Integration

on:
  push:
    branches:
      - master
      - develop
      - build-branch-3.0.0
    # Skip jobs when only documentation files are changed
    paths-ignore:
      - '**.md'
      - '**.rst'
      - '**.db'
      - 'docs/**'
  pull_request:
    paths-ignore:
      - '**.md'
      - '**.rst'
      - '**.db'
      - 'docs/**'

jobs:
  build-windows:
    runs-on: windows-latest
    env:
      DEPS_INSTALL_DIR: '${{ github.workspace }}/install'
      buildDir: '${{ github.workspace }}/build/'
      vcpkgDir: '${{ github.workspace }}\..\vcpkg'
      # tripletPath: '${{ github.workspace }}\..\vcpkg\triplets\community\x64-windows-release.cmake'
      BUILD_TYPE: Release
      CTEST_OUTPUT_ON_FAILURE: 1
      ALICEVISION_ROOT: '${{ github.workspace }}/install'
      COMMIT_ID: 8e8a3d7c1a6f7f587b486663b1e814911e6f2342
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
            submodules: recursive

      - name: vcpkg - Clone repository
        # Uses a specific version of vcpkg with a fix on OpenEXR/Imath portfiles
        run: |
          cd ..
          git clone https://github.com/alicevision/vcpkg.git
          cd vcpkg
          git checkout ${{ env.COMMIT_ID }}
          cd ${{ github.workspace }}

          # New-Item -Path ${{ env.tripletPath}} -ItemType File
          # "set(VCPKG_TARGET_ARCHITECTURE x64)" | Out-File -FilePath ${{ env.tripletPath}} -Append
          # "set(VCPKG_CRT_LINKAGE dynamic)" | Out-File -FilePath ${{ env.tripletPath}} -Append
          # "set(VCPKG_LIBRARY_LINKAGE dynamic)" | Out-File -FilePath ${{ env.tripletPath}} -Append
          # "set(VCPKG_BUILD_TYPE release)" | Out-File -FilePath ${{ env.tripletPath}} -Append

      - name: vcpkg - Boostrap
        run: |
           ${{ env.vcpkgDir }}\bootstrap-vcpkg.bat

      #- uses: Jimver/cuda-toolkit@v0.2.3
      #  id: cuda-toolkit
      #  with:
      #    cuda: '11.2.2'
      #
      #- name: Display CUDA information
      #  run: echo "Installed cuda version is "${{steps.cuda-toolkit.outputs.cuda}}
      #       echo "Cuda install location "${{steps.cuda-toolkit.outputs.CUDA_PATH}}
      #       nvcc -V

      # CUDA doesn't seem to handle Custom Build with "Jimver/cuda-toolkit@v0.2.3" well raising an error MSB8066 during build
      # This needs a fix before implementation


      - name: Display remaining disk space (16 Go max)
        run: |
          Get-CimInstance -Class Win32_logicaldisk

      # Install latest CMake.
      - uses: lukka/get-cmake@latest

      # Restore from cache the previously built ports. If a "cache miss" occurs, then vcpkg is bootstrapped. Since a the vcpkg.json is being used later on to install the packages when run-cmake runs, no packages are installed at this time and the input 'setupOnly:true' is mandatory.
      - name: vcpkg - Setup dependencies
        uses: lukka/run-vcpkg@v7
        with:
          # Just install vcpkg for now, do not install any ports in this step yet.
          setupOnly: false
          # Location of the vcpkg submodule in the Git repository.
          vcpkgDirectory: ${{ env.vcpkgDir }}
          vcpkgGitCommitId: ${{ env.COMMIT_ID }}
          vcpkgArguments: boost-algorithm boost-accumulators boost-atomic boost-container boost-date-time boost-exception boost-filesystem boost-graph boost-log
                          boost-program-options boost-property-tree boost-ptr-container boost-regex boost-serialization boost-system boost-test boost-thread boost-timer
                          lz4
                          openexr
                          geogram
                          eigen3
                          alembic
                          opencv[eigen,ffmpeg,webp,contrib,nonFree]
                          openimageio[libraw,ffmpeg,freetype,opencv,gif,webp,opencolorio]
                          ceres[suitesparse,cxsparse]
                          tbb
                          assimp
                          pcl
                          clp
          # without "cuda" for now
          vcpkgTriplet: x64-windows-release
          # doNotCache: true
          # Ensure the vcpkg artifacts are cached, they are generated in the 'CMAKE_BINARY_DIR/vcpkg_installed' directory.
          additionalCachedPaths: ${{ env.buildDir }}/vcpkg_installed
          # This is used to unbreak cached artifacts if for some reason dependencies fail to build,
          # the action does not notice it and saves broken artifacts.
          appendedCacheKey: cache2

      - name: vcpkg - Display installed packages
        run:
            vcpkg list

      - name: Build
        uses: lukka/run-cmake@v3
        with:
          cmakeListsOrSettingsJson: CMakeListsTxtAdvanced
          cmakeListsTxtPath: '${{ github.workspace }}/CMakeLists.txt'
          buildDirectory: ${{ env.buildDir }}
          buildWithCMakeArgs: '--config Release --target install'
          cmakeAppendedArgs: -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }}
                             -DBUILD_SHARED_LIBS:BOOL=ON
                             -DTARGET_ARCHITECTURE=core
                             -DCMAKE_INSTALL_PREFIX:PATH=${{ env.ALICEVISION_ROOT }}
                             -DALICEVISION_BUILD_TESTS:BOOL=ON
                             -DALICEVISION_BUILD_EXAMPLES:BOOL=ON
                             -DALICEVISION_USE_OPENCV:BOOL=ON
                             -DALICEVISION_USE_CUDA:BOOL=OFF
                             -DALICEVISION_USE_CCTAG:BOOL=OFF
                             -DALICEVISION_USE_POPSIFT:BOOL=OFF
                             -DALICEVISION_USE_ALEMBIC:BOOL=ON
                             -DALICEVISION_USE_OPENGV:BOOL=OFF
          # This input tells run-cmake to consume the vcpkg.cmake toolchain file set by run-vcpkg.
          cmakeBuildType: Release
          useVcpkgToolchainFile: true
          buildWithCMake: true

      - name: Collect Artifacts
        run: |
          # Create a directory to store artifacts
          mkdir artifacts

          # Copy artifacts from the install folder to the artifacts folder
          copy "${{ env.ALICEVISION_ROOT }}/*" artifacts/

      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: my-artifacts
          path: artifacts

      - name: UnitTests
        uses: lukka/run-cmake@v3
        with:
          cmakeListsOrSettingsJson: CMakeListsTxtAdvanced
          cmakeListsTxtPath: '${{ github.workspace }}/CMakeLists.txt'
          buildDirectory: ${{ env.buildDir }}
          buildWithCMakeArgs: '--config Release --target RUN_TESTS'
          cmakeAppendedArgs: -DCMAKE_INSTALL_PREFIX:PATH=${{ env.ALICEVISION_ROOT }}
          # This input tells run-cmake to consume the vcpkg.cmake toolchain file set by run-vcpkg.
          cmakeBuildType: Release
          useVcpkgToolchainFile: true
          buildWithCMake: true

